{"version":3,"sources":["logo.svg","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","create","baseURL","coords","params","v","key","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","isLoading","fetch_coords","bind","assertThisInitialized","onMapCreated","onDragEnd","onCloseClick","onClick","starttime_input","React","createRef","endtime_input","_this2","setState","starttime","current","value","trim","endtime","console","log","API","get","format","then","res","_","map","features","e","geometry","coordinates","catch","err","setOptions","disableDefaultUI","_this3","react_default","a","createElement","ProgressBar","animated","now","Container","className","Form","Group","Label","Control","ref","placeholder","Button","dist","width","height","lat","lng","zoom","loadingMessage","draggable","content","radius","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iOCEzBC,WAAMC,OAAO,CACxBC,QAAS,yECOPC,EACC,WADDA,GAEE,mBAGFC,EAAS,CAACC,EAAG,QAASC,IAAK,2CAuGlBC,cAnGb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACZE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,KAAM,KAAMC,WAAW,GACrCT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKa,aAAeb,EAAKa,aAAaF,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKc,UAAYd,EAAKc,UAAUH,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IACjBA,EAAKe,aAAef,EAAKe,aAAaJ,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAKgB,QAAUhB,EAAKgB,QAAQL,KAAbV,OAAAW,EAAA,EAAAX,CAAAD,IAEfA,EAAKiB,gBAAkBC,IAAMC,YAC7BnB,EAAKoB,cAAgBF,IAAMC,YAVfnB,mFAadG,KAAKO,sDAEK,IAAAW,EAAAlB,KACZA,KAAKmB,SAAS,SAAAf,GAAK,MAAK,CAACC,KAAMD,EAAMC,KAAMC,WAAW,KACtD,IAAMc,EAAYpB,KAAKc,gBAAgBO,QAAQC,MAAMC,QAAU,aACzDC,EAAUxB,KAAKiB,cAAcI,QAAQC,MAAMC,QAAU,aAC3DE,QAAQC,IAAIN,EAAWI,GACvBG,EAAIC,IAAI,uBAAwB,CAACpC,OAAQ,CACrCqC,OAAQ,UACRT,YACAI,aAEDM,KAAK,SAAAC,GACFb,EAAKC,SAAS,SAAAf,GAAK,MAAK,CACpBE,WAAW,EACXD,KAAM2B,IAAEC,IAAIF,EAAI1B,KAAK6B,SAAU,SAAAC,GAAC,OAAIA,EAAEC,SAASC,mBAGtDC,MAAM,SAAAC,GACHd,QAAQC,IAAIa,GACZrB,EAAKC,SAAS,SAAAf,GAAK,MAAK,CAACC,KAAMD,EAAMC,KAAMC,WAAW,4CAIjD2B,GACXA,EAAIO,WAAW,CACbC,kBAAkB,sCAIZN,GACRV,QAAQC,IAAI,YAAaS,0CAIzBV,QAAQC,IAAI,gDAGNS,GACNV,QAAQC,IAAI,UAAWS,oCAGhB,IAAAO,EAAA1C,KACP,OAAQ2C,EAAAC,EAAAC,cAAA,WACJ7C,KAAKI,MAAME,UAAYqC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaC,UAAQ,EAACC,IAAK,OAAgBL,EAAAC,EAAAC,cAAA,YACzEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAWC,UAAU,QAAOP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KAAMR,EAAAC,EAAAC,cAACM,EAAA,EAAKC,MAAN,KAChCT,EAAAC,EAAAC,cAACM,EAAA,EAAKE,MAAN,mBACAV,EAAAC,EAAAC,cAACM,EAAA,EAAKG,QAAN,CAAcC,IAAKvD,KAAKc,gBAAiB0C,YAAY,eACrDb,EAAAC,EAAAC,cAACM,EAAA,EAAKE,MAAN,iBACDV,EAAAC,EAAAC,cAACM,EAAA,EAAKG,QAAN,CAAcC,IAAKvD,KAAKiB,cAAeuC,YAAY,gBACpDb,EAAAC,EAAAC,cAACM,EAAA,EAAKC,MAAN,KAAYT,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQ5C,QAAS,kBAAM6B,EAAKnC,iBAA5B,WACZoC,EAAAC,EAAAC,cAACM,EAAA,EAAKC,MAAN,KAAYT,EAAAC,EAAAC,cAACa,EAAA,MAAD,CACVC,MAAO,QACPC,OAAQ,QACRC,IAAKtE,EACLuE,IAAKvE,EACLwE,KAAM,EACNC,eAAgB,WAChBxE,OAAQA,EACRkB,aAAcV,KAAKU,cAEfsB,IAAEC,IAAIjC,KAAKI,MAAMC,KAAM,SAAA8B,GAAC,OACpBQ,EAAAC,EAAAC,cAACa,EAAA,OAAD,CACIG,IAAK1B,EAAE,GACP2B,IAAK3B,EAAE,GACP8B,WAAW,EACXtD,UAAW+B,EAAK/B,cAI5BgC,EAAAC,EAAAC,cAACa,EAAA,WAAD,CACEG,IAAKtE,EACLuE,IAAKvE,EACL2E,QAAS,kBACTtD,aAAcZ,KAAKY,eACrB+B,EAAAC,EAAAC,cAACa,EAAA,OAAD,CACEG,IAAKtE,EACLuE,IAAKvE,EACL4E,OAAQ,IACRtD,QAASb,KAAKa,sBA9FNE,IAAMqD,WCLJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.f839a125.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\n\nexport default axios.create({\n    baseURL: ' https://earthquake.usgs.gov/'\n})\n","import React from 'react';\nimport _ from 'lodash'\nimport logo from './logo.svg';\nimport './App.css';\nimport API from './api'\n\nimport {Gmaps, Marker, InfoWindow, Circle} from 'react-gmaps';\n// import DatePicker from 'react-datepicker'\nimport {Container, ProgressBar, Form, Button} from 'react-bootstrap'\n\nconst coords = {\n  lat: 51.5258541,\n  lng: -0.08040660000006028\n};\n\nconst params = {v: '3.exp', key: 'AIzaSyDKrgZWOqV-PAI_Rin5RR_TcajiHHhqla8'};\n\nclass App extends React.Component {\n\n  constructor(props){\n        super(props)\n        this.state = {data: null, isLoading: false}\n        this.fetch_coords = this.fetch_coords.bind(this)\n        this.onMapCreated = this.onMapCreated.bind(this)\n        this.onDragEnd = this.onDragEnd.bind(this)\n        this.onCloseClick = this.onCloseClick.bind(this)\n        this.onClick = this.onClick.bind(this)\n        \n        this.starttime_input = React.createRef()\n        this.endtime_input = React.createRef()\n  }\n  componentDidMount(){\n      this.fetch_coords()\n  }\n  fetch_coords(){\n    this.setState(state => ({data: state.data, isLoading: true}))\n    const starttime = this.starttime_input.current.value.trim() || \"2014-01-01\"\n    const endtime = this.endtime_input.current.value.trim() || \"2014-01-02\"\n    console.log(starttime, endtime)\n    API.get('fdsnws/event/1/query', {params: {\n        format: 'geojson',\n        starttime,\n        endtime\n    }})\n      .then(res => { \n          this.setState(state => ({\n              isLoading: false,\n              data: _.map(res.data.features, e => e.geometry.coordinates)\n          }))\n      })\n      .catch(err => {\n          console.log(err)\n          this.setState(state => ({data: state.data, isLoading: false}))\n      })\n  }\n\n  onMapCreated(map) {\n    map.setOptions({\n      disableDefaultUI: true\n    });\n  }\n\n  onDragEnd(e) {\n    console.log('onDragEnd', e);\n  }\n\n  onCloseClick() {\n    console.log('onCloseClick');\n  }\n\n  onClick(e) {\n    console.log('onClick', e);\n  }\n\n  render() {\n    return (<div>\n      { this.state.isLoading ? <div><ProgressBar animated now={100} /></div> : <div />}\n      <Container className=\"pt-5\"><Form><Form.Group>\n        <Form.Label>Start Date</Form.Label>\n        <Form.Control ref={this.starttime_input} placeholder=\"2014-01-01\"/>\n        <Form.Label>End Date</Form.Label>\n       <Form.Control ref={this.endtime_input} placeholder=\"2014-01-02\"/></Form.Group>\n      <Form.Group><Button onClick={() => this.fetch_coords()}>Update</Button></Form.Group>\n      <Form.Group><Gmaps\n        width={'800px'}\n        height={'600px'}\n        lat={coords.lat}\n        lng={coords.lng}\n        zoom={1}\n        loadingMessage={'Be happy'}\n        params={params}\n        onMapCreated={this.onMapCreated}>\n        {\n            _.map(this.state.data, e =>\n                <Marker\n                    lat={e[1]}\n                    lng={e[0]}\n                    draggable={true}\n                    onDragEnd={this.onDragEnd} \n                />\n            )\n        }\n        <InfoWindow\n          lat={coords.lat}\n          lng={coords.lng}\n          content={'Hello, React :)'}\n          onCloseClick={this.onCloseClick} />\n        <Circle\n          lat={coords.lat}\n          lng={coords.lng}\n          radius={500}\n          onClick={this.onClick} />\n      </Gmaps></Form.Group></Form></Container></div>\n    );\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/scss/bootstrap.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}